# This is a sample deployPackager properties file. 
#
# There are two sets of SCM information that can be supplied. The first specifies 
# the location of the SQL files that will be packaged - these start with "sqlScm". 
# The second is for the Datical DB project itself and has property names that start 
# with "ddbScm". 
#
# In addition to SCM properties, you can also supply a location for database backups.
#
# The following properties can be set in the deployPackager.properties file:
#
# sqlScmSystem       - SCM software type for SQL code - currently supported types
#                      are git, svn, and tfs. Required. No default.
#
# sqlScmPath         - Local directory path to the developer's SCM working copy for
#                      SQL code. Can be absolute, or relative to the directory
#                      where the Datical DB project is.
#                      If using multiple branches, see the section below for more
#                      details.
#                      Note that When used on Windows, backslashes MUST be doubled,
#                      because the \ character is an escape character. Proper Windows
#                      statement for this would look like this:
#                      sqlScmPath=c:\\users\\username\\scmworkdir\\projectname
#
# sqlScmBranch       - The repository branch to be used for SQL code. The format of
#                      this value is dependent on the SCM system being used.
#                        git - just supply the branch name
#                        svn - supply the full branch URL, which might look like
#                              svn://servername/projectname/branches/branchname
#                        tfs - full branch specifier like $/repo/project/branch (your 
#                              path may have more or fewer segments)
#                      If using multiple branches, see the section below for more
#                      details.
#
# sqlScmLastImportID - The SCM system's "id" for the most recently processed SQL
#                      code check in. This will be automatically updated when the 
#                      deploy packager completes successfully.
#                      For Git, this is the first 8 digits of the relevant hash
#                      For SVN, this is the relevant release number
#                      For TFS, this is an integer change identifier
#                      Note: Do not leave blank. Do not use the most recent 
#                      checkin. For first time use, use an ID from an earlier checkin.
#                      If using multiple branches, see the section below for more
#                      details.
#
# sqlScmSQLBaseDir   - Top level directory for the SQL scripts stored in the 
#                      developer's SQL SCM working copy. This is just the name of a 
#                      single directory. Can be the character '.' to specify that
#                      the directory specified by sqlScmPath is a directory that
#                      contains the sub-directories (ddl,data_dml,sql,sqlplus,
#                      sql_direct,function,procedure,package,packagebody,trigger)
#
# sqlScmDoCheckout   - If this is not present or is set to 'true', deploy packager 
#                      will ensure that the latest available revision of the SQL 
#                      repository is retrieved before processing. Set this to 
#                      'false' to skip this.
#                      For users using git, this is equivalent to 'git pull'
#                      For users using svn, this is equivalent to 'svn update'
#                      For users using TFS, this is equivalent to 'tf get'
#
# ddbScmSystem       - SCM software type for the Datical DB project. Currently 
#                      supported types are git, svn, and tfs. May be different than 
#                      the sqlScmSystem. If this is not present, deploy packager 
#                      will use the value from sqlScmSystem.
#
# ddbScmPath         - Local absolute directory path to the developer's Datical DB SCM 
#                      working copy. If this is not present, deploy packager will 
#                      use the value from sqlScmPath. 
#                      Note that When used on Windows, backslashes MUST be doubled,
#                      because the \ character is an escape character. Proper Windows
#                      statement for this would look like this:
#                      ddbScmPath=c:\\users\\username\\scmworkdir\\projectname
#
# ddbScmBranch       - The branch to be used for the Datical DB project. If this 
#                      is not present, deploy packager will use the value from 
#                      sqlScmBranch. See the description for sqlScmBranch for examples
#                      of valid values.
#
# ddbScmDoCheckout   - If this is not present or is set to 'true', deploy packager 
#                      will ensure that the latest available revision of the 
#                      Datical DB repository is retrieved before processing. Set 
#                      this to 'false' to skip this. If this is not present, 
#                      deploy packager will use the value from sqlScmSystem.
#                      For users using git, this is equivalent to 'git pull'
#                      For users using svn, this is equivalent to 'svn update'
#                      For users using TFS, this is equivalent to 'tf get'
#
# parallel           - ORACLE-ONLY:  The number of parallel threads that can be 
#                      used by expdp/impdp when doing backup/restore
#
# databaseBackupRestoreLocation - 
#                      During packaging, the script will make backups 
#                      of the database. These are usually stored on the database 
#                      server itself. This property specifies the location to which 
#                      the database backup should be written. Depending on your 
#                      DBMS, this may need to be a directory or it may need to 
#                      be a file.
#                      Note: On Oracle and DB2, this directory will be on the 
#                      server, so the path separator must follow the server's 
#                      convention ('/' on Linux, '\' on Windows.) Because the 
#                      '\' is an escape character in Java properties files, you 
#                      must supply '\\' to indicate a single backslash.)
#
# databaseBackupRestoreMethod
#                    - This property can be used to load custom backup/restore scripts.
#                    - ORACLE-ONLY: Set to BackupRestoreOracleDatapump to use the
#                      Oracle Datapump API directly instead of the expdb/impdb 
#                      command line tools.
#                    - ORACLE-ONLY: Set to BackupRestoreOracleFlashback to use the
#                      Flashback instead of the expdb/impdb
#                      command line tools.
#
# databaseBackupMode
#                    - always (default) - A backup of the reference database will
#                      be taken for every run of deploy packager.  If a failure
#                      occurs during packaging, the reference database will be restored
#                      to this backup file.  This does not apply to feature merge
#                      packaging where a dbDef is provided.
#                    - on_demand - A backup of the reference database will only be taken
#                      when a command line parameter of createDatabaseBackup=true
#
# When working with multiple branches in the sqlScm repository, there are 
# additional pipeline-specific and dbDef-specific properties that can be set, as 
# well as a property that controls how scm branching is handled. 
#
# scmBranchHandling  - This property can be set to either 'directory' or 
#                      'scmswitch'. If it is not present, then deployPackager will 
#                      behave as if 'scmswitch' has been set.
#                      When set to 'directory', deployPackager will use different 
#                      working copies that should each contain sql code 
#                      corresponding to a particular SCM branch. This is most 
#                      useful for SCM systems like SVN and TFS that pose
#                      difficulties when working with multiple branches. When set 
#                      to 'directory' then you will also need to set 
#                      pipeline_name.sqlScmPath and/or dbDef_name.sqlScmPath 
#                      properties as described below.
#                      When this is set to 'scmswitch' or if this property is not 
#                      set, then deployPackager will use the path specified by 
#                      sqlScmPath as a single working copy, and will use SCM
#                      specific commands to switch that working copy to use the 
#                      appropriate branch that is specified using the 
#                      pipeline_name.sqlScmBranch and/or dbDef_name.sqlScmBranch 
#                      properties. This setting is most appropriate when using
#                      git as the SCM tool.
#
# pipeline_name.sqlScmPath - 
#                      Local directory path to the developer's SCM working copy, 
#                      on the branch that corresponds to the given pipeline, for 
#                      SQL code. Can be absolute, or relative to the directory 
#                      where the Datical DB project is.
#                      Note that When used on Windows, backslashes MUST be doubled,
#                      because the \ character is an escape character.
#
# pipeline_name.sqlScmBranch - 
#                      The repository branch to be used for SQL code. The format of
#                      this value is dependent on the SCM system being used.
#                        git - supply the branch name
#                        svn - supply the full branch URL, which might look like
#                              svn://servername/projectname/branches/branchname
#                        tfs - full branch specifier like $/repo/project/branch (your 
#                              path may have more or fewer segments)
#
# pipeline_name.sqlScmLastImportID - 
#                      The SCM system's "id" for the most recently processed 
#                      Datical DB project check in on the branch corresponding to
#                      the given pipeline_name. This will be automatically 
#                      updated when the deploy packager completes successfully.
#                      For Git, this is the first 8 digits of the relevant hash
#                      For SVN, this is the relevant release number
#                      For TFS, this is an integer identifier
#                      Note: Do not leave blank. Do not use the most recent 
#                      checkin. For first time use, use an ID from an earlier checkin.
#
# dbDef_name.sqlScmPath - Local directory path to the developer's SCM working copy, 
#                      on the branch that corresponds to the given dbDef, for 
#                      SQL code. Can be absolute, or relative to the directory 
#                      where the Datical DB project is.
#                      Note that When used on Windows, backslashes MUST be doubled,
#                      because the \ character is an escape character.
#
# dbDef_name.sqlScmBranch -
#                      The repository branch to be used for SQL code corresponding
#                      to the given dbDef_name. The format of this value is 
#                      dependent on the SCM system being used.
#                        git - supply the branch name
#                        svn - supply the full branch URL, which might look like
#                              svn://servername/projectname/branches/branchname
#                        tfs - full branch specifier like $/repo/project/branch (your 
#                              path may have more or fewer segments)
#
# dbDef_name.sqlScmLastImportID     - 
#                      The SCM system's "id" for the most recently processed 
#                      Datical DB project check in on the branch corresponding to 
#                      the given dbDef_name. This will be automatically updated 
#                      when the deploy packager completes successfully.
#                      For Git, this is the first 8 digits of the relevant hash
#                      For SVN, this is the relevant release number
#                      For TFS, this is an integer identifier
#                      Note: Do not leave blank. Do not use the most recent 
#                      checkin. For first time use, use an ID from an earlier checkin.
#
# ddlExcludeList       Comma separated list of stored logic types to exclude from snapshot
#                        This may be the values 'all', 'none', or combinations of:
#                        'procedure', 'function', 'package', 'packagebody', 'trigger', 'view'
#
# archive              If this is not present or is set to 'true', deploy packager will 
#                      archive successfully processed SQL files after packaging.  
#                      If set to false, no archiving will occur.
#
# packageOrderStrategy -
#                      DEFAULT - this is the default strategy that is set if the property is
#                                not specified. This preserves the commit order while packaging.
#                      PACKAGEMETHOD - packaging order is  based on the packageMethod first
#                                and then by path/filename
#                      ALPHANUMERIC - packaging order is based strictly on path/filename
#
# skipCheckin        - If this is not present or is set to false, Deployment Packager performs
#                      the final SCM operation to send changes from the local repository to
#                      the SCM server. To skip this operation, set to true.
#                        git - skip the final  git push (but still do the add and the commit)
#                        svn - skip the final  svn commit (but still do the add)
#                        tfs - skip the final  tf checkin (but still do the add)
#
# commitMsgLabelRegexp -
#                      By default, the Deploy Packager will scan the commit messages in your SQL code repo
#                      for values in square brackets.  These values will be added as labels to the change sets
#                      that are produced by the files in that commit.
#                      For example:
#                           Commit Message: Adding column to hold area code information for [JIRA-1234]
#                           Change Set Label: JIRA-1234
#                      If there is another pattern you would like to use for the designation of change set labels
#                      you can specify the regular expression for that pattern using this property.
#                      For example: commitMsgLabelRegexp=JIRA (\\d{6})
#                           Commit Message: Adding column to hold area code information for JIRA 4321 which requires phone number separation
#                           Change Set Label: 4321
#
# oracleBackupErrorWhitelist -
#                      A comma separated list of Oracle error codes to be ignored
#                      when evaluating expdp output for errors.  During an Oracle backup that uses
#                      local expdp / impdp clients OR the DATAPUMP API on the server,
#                      error messages are compared to the white-list:
#                           If any errors are found that do not exist in the white-list restore fails
#                           If the only errors found do exist in the white-list, restore completes successfully
#                      For example:
#                           oracleRestoreErrorWhitelist=ORA-31684,ORA-39111,ORA-39151
#
# oracleRestoreErrorWhitelist -
#                      A comma separated list of Oracle error codes to be ignored
#                      when evaluating impdp output for errors.  During an Oracle restore that uses
#                      local expdp / impdp clients OR the DATAPUMP API on the server,
#                      error messages are compared to the white-list:
#                           If any errors are found that do not exist in the white-list restore fails
#                           If the only errors found do exist in the white-list, restore completes successfully
#                      For example:
#                           oracleRestoreErrorWhitelist=ORA-31684,ORA-39111,ORA-39151
#
# ephemeralConnectionRetryTimeout -
#                      Defines an overall time to get the connection to the Ephemeral database instance
#                      after the backup operation is executed. Default value is 20 minutes.
#
sqlScmSystem=
sqlScmLastImportID=
sqlScmBranch=
sqlScmPath=
sqlScmSQLBaseDir=
ddbScmSystem=
ddbScmBranch=
ddbScmPath=
databaseBackupRestoreLocation=
databaseBackupMode=
parallel=
ddlExcludeList=
archive=
packageOrderStrategy=
skipCheckin=
commitMsgLabelRegexp=
oracleBackupErrorWhitelist=
oracleRestoreErrorWhitelist=
ephemeralConnectionRetryTimeout=
